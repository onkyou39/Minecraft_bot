import logging

import os
import requests
import time
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# Enable logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# set higher logging level for httpx to avoid all GET and POST requests being logged

logging.getLogger("httpx").setLevel(logging.WARNING)


logger = logging.getLogger(__name__)

def log_command(command_name):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            logger.warning(f"{get_user_name(update)} sent COMMAND {command_name}")
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
AUTHORIZED_CHAT_ID = int(os.getenv("AUTHORIZED_CHAT_ID"))
API_URL = os.getenv("API_URL")
API_TOKEN = os.getenv("API_TOKEN")

# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ VPS (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å —ç–ø–æ—Ö–∏)
last_poweron_time = 0
# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
last_status_time = 0
POWERON_COOLDOWN = 20 * 60  # 20 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
STATUS_COOLDOWN = 30 # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞


def get_user_name(update: Update) -> str:
    return update.effective_user.username or update.effective_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

async def notify_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    user_name = get_user_name(update)
    message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} {action}."
    await context.bot.send_message(chat_id=AUTHORIZED_CHAT_ID, text=message)

@log_command("/start")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_name = update.effective_user.username or update.effective_user.full_name

    await context.bot.send_message(chat_id=AUTHORIZED_CHAT_ID,
        text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} —Å chat_id {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #await update.message.reply_text(update.message.text)
    await update.message.reply_text("–Ø –ø–æ–∫–∞ –µ—â—ë –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è üòê")

@log_command("/poweron")
async def poweron(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_poweron_time

    if update.effective_chat.id != AUTHORIZED_CHAT_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    now = time.time()
    if now - last_poweron_time < POWERON_COOLDOWN:
        remaining = int(POWERON_COOLDOWN - (now - last_poweron_time))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    try:
        headers = {
            "Authorization": f"Bearer {API_TOKEN}",
            "Content-Type": "application/json"
        }

        response = requests.get(API_URL, headers=headers)
        if response.ok:
            data = response.json()
            is_power_on = data.get("IsPowerOn")
            if is_power_on is True:
                await update.message.reply_text("‚úÖ –°–µ—Ä–≤–µ—Ä —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
                last_poweron_time = now  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                return
            elif is_power_on is False:
                url = f"{API_URL}/Action"
                json_data = {"Type": "PowerOn"}

                response = requests.post(url, headers=headers, json=json_data)

                if response.ok:
                    data = response.json()
                    state = data.get("State", "Unknown")
                    if state == "InProgress":
                        await update.message.reply_text("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                        last_poweron_time = now  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                    else:
                        await update.message.reply_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: {state}")
                        last_poweron_time = now  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

                    await notify_admin(update, context, "–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")

                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.status_code}\n{response.text}")

    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

@log_command("/status")
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):

    global last_status_time

    if update.effective_chat.id != AUTHORIZED_CHAT_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    now = time.time()
    if now - last_status_time < STATUS_COOLDOWN:
        remaining = int(STATUS_COOLDOWN - (now - last_status_time))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    try:

        headers = {
            "Authorization": f"Bearer {API_TOKEN}",
            "Content-Type": "application/json"
        }
        response = requests.get(API_URL, headers=headers)
        if response.ok:
            last_status_time = now  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
            data = response.json()
            is_power_on = data.get("IsPowerOn")
            if is_power_on is True:
                await update.message.reply_text("üü¢ –°–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á–µ–Ω.")
            elif is_power_on is False:
                await update.message.reply_text("üî¥ –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
            else:
                await update.message.reply_text("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("poweron", poweron))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    application.run_polling()
