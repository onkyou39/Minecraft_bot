import logging
import json
import random
import os
import aiohttp
import time
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, Job, JobQueue
from watchdog import watchdog_tick, get_players_list
from typing import Optional

# Enable logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# set higher logging level for httpx to avoid all GET and POST requests being logged

logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("apscheduler.executors.default").setLevel(logging.WARNING)

notify_logger = logging.getLogger("notify")
logging.getLogger("notify").setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)


def log_command(command_name):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            logger.info(f"{get_user_name(update)} sent COMMAND {command_name}")
            return await func(update, context, *args, **kwargs)

        return wrapper

    return decorator


load_dotenv()

AUTHORIZED_FILE = "authorized.json"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
API_URL = os.getenv("API_URL")
API_TOKEN = os.getenv("API_TOKEN")

# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ VPS (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å —ç–ø–æ—Ö–∏)
last_poweron_time = 0
last_poweroff_time = 0
# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
last_status_time = 0
POWERON_COOLDOWN = 20 * 60  # 20 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
POWEROFF_COOLDOWN = 5 * 60 # 5 –º–∏–Ω—É—Ç
STATUS_COOLDOWN = 5  # –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞

watchdog_job: Optional[Job] = None
job_queue: Optional[JobQueue] = None

active_chats = set()


def load_auth_data():
    try:
        with open(AUTHORIZED_FILE, "r") as f:
            data = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ª–æ–≤–∞—Ä—å —Å int –∫–ª—é—á–∞–º–∏
            users = {int(user["id"]): user.get("username", "")
                     for user in data.get("users", [])}
            return users, set(data.get("groups", []))
    except (FileNotFoundError, json.JSONDecodeError):
        logger.warning("Authorization file not found or corrupted. Using empty sets.")
        return {}, set()


def save_auth_data():
    data = {
        "users": [{"id": uid, "username": name}
                  for uid, name in authorized_users.items()],
        "groups": list(authorized_groups)
    }
    with open(AUTHORIZED_FILE, "w") as f:
        json.dump(data, f, indent=2)


authorized_users, authorized_groups = load_auth_data()


def is_authorized(chat_id: int) -> bool:
    return (
            chat_id in authorized_users
            or chat_id in authorized_groups
            or chat_id == ADMIN_CHAT_ID
    )


def get_user_name(update: Update) -> str:
    return update.effective_user.username or update.effective_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"


async def get_server_status():
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL, headers=headers) as response:
            if response.status == 200:
                return await response.json()
            return {"error": f"{response.status}: {await response.text()}"}


async def notify_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    user_name = get_user_name(update)
    message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} {action}."
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)


async def watchdog_notifyer(message: str):
    try:
        #for chat_id in list(authorized_groups.union(authorized_users.keys())):
        for chat_id in active_chats:
            if chat_id:
                await application.bot.send_message(chat_id=chat_id, text=message) # type: ignore
        notify_logger.debug(f"Watchdog sent notification: {message}")
    except Exception as e:
        notify_logger.debug(f"Watchdog notification failed: {str(e)}")


async def log_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = get_user_name(update)
    message = update.message
    if message:
        logger.info(f"[{user_name}] –Ω–∞–ø–∏—Å–∞–ª: {message.text or '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]'}")


async def api_request(action: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }
    json_data = {"Type": action}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/Action", headers=headers, json=json_data) as response:
                if response.status == 200:
                    return await response.json()
                error_text = await response.text()
                return {"error": f"API error {response.status}: {error_text}"}
    except Exception as e:
        return {"error": f"Connection error: {str(e)}"}


async def shutdown_vps():
    now = time.time()
    active_chats.clear() # —Å–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    global last_poweron_time, watchdog_job
    last_poweron_time = now  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ VPS –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è
    # –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è VPS —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É watchdog
    if watchdog_job is not None:
        watchdog_job.schedule_removal()
        watchdog_job = None
        logger.info("Removed watchdog job")
    return await api_request("ShutDownGuestOS")


async def watchdog_task(context: ContextTypes.DEFAULT_TYPE):  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –¥–ª—è job_queue
    await watchdog_tick(shutdown_vps, watchdog_notifyer)


@log_command("/start")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_type = update.effective_chat.type  # 'private', 'group', 'supergroup', 'channel'
    if chat_type != 'private':
        return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ start –≤ –≥—Ä—É–ø–ø–µ
    chat_id = update.effective_chat.id
    user_name = get_user_name(update)

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID,
                                   text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} —Å chat_id {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text("üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #await update.message.reply_text(update.message.text)
    chat_type = update.effective_chat.type  # 'private', 'group', 'supergroup', 'channel'
    if chat_type != 'private':
        return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    """user_name = get_user_name(update)
    message_text = update.message.text
    logger.info(f"Message from {user_name}: {message_text}")"""
    await update.message.reply_text(random.choice(["üåö", "üåù"]))


@log_command("/addgroup")
async def addgroup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("‚ùó –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É.")
        return

    if update.effective_chat.id in authorized_groups:
        await update.message.reply_text("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        return

    authorized_groups.add(update.effective_chat.id)
    save_auth_data()
    await update.message.reply_text("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")


@log_command("/adduser")
async def adduser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if not context.args or len(context.args) > 2:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser user_id [@username]\n"
            "–ü—Ä–∏–º–µ—Ä: /adduser 123456 @user"
        )
        return

    user_id = context.args[0]
    if not user_id.isdigit():
        await update.message.reply_text("‚õî user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    username = context.args[1].lstrip("@") if len(context.args) == 2 else ""

    if user_id in authorized_users:
        await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        return

    authorized_users[user_id] = username
    save_auth_data()

    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username})" if username else f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")


@log_command("/removegroup")
async def removegroup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("‚ùó –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É.")
        return

    if update.effective_chat.id in authorized_groups:
        authorized_groups.remove(update.effective_chat.id)
        save_auth_data()
        await update.message.reply_text("‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –≤ —Å–ø–∏—Å–∫–µ.")


@log_command("/removeuser")
async def removeuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if len(context.args) != 1:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeuser user_id\n"
            "–ü—Ä–∏–º–µ—Ä: /removeuser 12345"
        )
        return

    user_id = context.args[0]
    if not user_id.isdigit():
        await update.message.reply_text("‚õî user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if int(user_id) not in authorized_users:
        await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    authorized_users.pop(int(user_id))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_auth_data()

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")


@log_command("/authorized")
async def list_authorized(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫.")
        return

    message = ["üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö:"]

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if authorized_users:
        users_list = "\n".join(
            f"üë§ {user_id}" + (f" (@{username})" if username else "")
            for user_id, username in sorted(authorized_users.items(), key=lambda x: int(x[0]))
        )
        message.append(f"\nüîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(authorized_users)}):\n{users_list}")
    else:
        message.append("\nüîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

    # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    if authorized_groups:
        groups_list = "\n".join(f"üë• {group_id}" for group_id in sorted(authorized_groups))
        message.append(f"\nüîπ –ì—Ä—É–ø–ø—ã ({len(authorized_groups)}):\n{groups_list}")
    else:
        message.append("\nüîπ –ì—Ä—É–ø–ø—ã: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    message.append("\n‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /adduser, /removeuser, /addgroup, /removegroup –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    await update.message.reply_text("".join(message))


@log_command("/poweron")
async def poweron(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_poweron_time, last_status_time, watchdog_job, job_queue, active_chats

    if not is_authorized(update.effective_chat.id):
        await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return

    active_chats.add(update.effective_chat.id)

    now = time.time()
    if now - last_poweron_time < POWERON_COOLDOWN:
        remaining = int(POWERON_COOLDOWN - (now - last_poweron_time))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    if now - last_status_time < STATUS_COOLDOWN:
        remaining = int(STATUS_COOLDOWN - (now - last_status_time))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return

    try:
        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        server_status = await get_server_status()

        if "error" in server_status:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {server_status['error']}")
            return
        is_power_on = server_status.get("IsPowerOn")

        if watchdog_job is None:
            watchdog_job = job_queue.run_repeating(watchdog_task, interval=60, first=10, name="minecraft_watchdog")
            logger.info("Started watchdog job")

        if is_power_on is True:
            await update.message.reply_text("‚úÖ –°–µ—Ä–≤–µ—Ä —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
            last_status_time = now
            return

        elif is_power_on is False:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ
            result = await api_request("PowerOn")

            if "error" in result:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['error']}")
                return

            state = result.get("State", "Unknown")
            if state == "InProgress":
                await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            else:
                await update.message.reply_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: {state}")

            last_poweron_time = now
            last_status_time = now

            chat_type = update.effective_chat.type  # 'private', 'group', 'supergroup', 'channel'
            if chat_type == 'private':
                await notify_admin(update, context, "–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")

        else:
            await update.message.reply_text("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.")

    except Exception as e:
        logger.exception(f"Error in poweron command: {str(e)}")
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


@log_command("/poweroff")
async def poweroff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /poweroff"""
    global last_poweroff_time, last_status_time, watchdog_job, job_queue  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ poweron

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    now = time.time()
    if now - last_poweroff_time < POWEROFF_COOLDOWN:
        remaining = int(POWEROFF_COOLDOWN - (now - last_poweroff_time))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º.")
        return

    if now - last_status_time < STATUS_COOLDOWN:
        remaining = int(STATUS_COOLDOWN - (now - last_status_time))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return

    try:
        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        server_status = await get_server_status()

        if "error" in server_status:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {server_status['error']}")
            return
        is_power_on = server_status.get("IsPowerOn")

        if is_power_on is False:
            await update.message.reply_text("‚úÖ –°–µ—Ä–≤–µ—Ä —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω.")
            last_status_time = now
            return

        elif is_power_on is True:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
            result = await shutdown_vps()

            if "error" in result:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['error']}")
                return

            state = result.get("State", "Unknown")
            if state == "InProgress":
                await update.message.reply_text("‚úÖ –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            else:
                await update.message.reply_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: {state}")

            last_poweroff_time = now
            last_status_time = now

            #await notify_admin(update, context, "–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")

        else:
            await update.message.reply_text("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.")

    except Exception as e:
        logger.exception(f"Error in poweroff command: {str(e)}")
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


@log_command("/status")
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_status_time, watchdog_job

    if not is_authorized(update.effective_chat.id):
        await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return

    now = time.time()
    if now - last_status_time < STATUS_COOLDOWN:
        remaining = int(STATUS_COOLDOWN - (now - last_status_time))
        await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    try:

        # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        server_status = await get_server_status()

        if "error" in server_status:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞: {server_status['error']}")
            return
        last_status_time = now  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
        is_power_on = server_status.get("IsPowerOn")
        if is_power_on is True:
            active_chats.add(update.effective_chat.id) # –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
            players = await get_players_list()
            if players is not None:
                await update.message.reply_text(f"üü¢ –°–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á–µ–Ω. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {players} –∏–≥—Ä–æ–∫(–æ–≤).")
                if watchdog_job is None:
                    watchdog_job = job_queue.run_repeating(watchdog_task, interval=60, first=10,
                                                           name="minecraft_watchdog")
                    logger.info("Started watchdog job")
            else:
                await update.message.reply_text("üü° Linux c–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á–µ–Ω. Minecraft —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        elif is_power_on is False:
            await update.message.reply_text("üî¥ –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
            if watchdog_job is not None:
                watchdog_job.schedule_removal()
                watchdog_job = None
                logger.info("Removed watchdog job")
        else:
            await update.message.reply_text("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.")

    except Exception as e:
        logger.error(f"Error in status command: {str(e)}")
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    if job_queue is None:
        job_queue = application.job_queue
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("poweron", poweron))
    application.add_handler(CommandHandler("poweroff", poweroff))
    application.add_handler(CommandHandler("addgroup", addgroup))
    application.add_handler(CommandHandler("removegroup", removegroup))
    application.add_handler(CommandHandler("adduser", adduser))
    application.add_handler(CommandHandler("removeuser", removeuser))
    application.add_handler(CommandHandler("authorized", list_authorized))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, echo))
    #application.add_handler(MessageHandler(filters.ALL, log_all), group=0) # –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ
    application.run_polling(poll_interval=1, timeout=30)
    #application.run_polling()
