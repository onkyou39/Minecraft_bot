import asyncio
import logging
import time
import os
from dotenv import load_dotenv
from mcstatus import JavaServer
from typing import Optional
from dataclasses import dataclass, fields

load_dotenv()

SERVER_ADDRESS = os.getenv("SERVER_ADDRESS")  # –∏–ª–∏ IP
QUERY_PORT = 25565
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
WD_POWEROFF_COOLDOWN = 10 * 60 # 10 –º–∏–Ω—É—Ç


logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO
)


logger = logging.getLogger("watchdog")
logging.getLogger("watchdog").setLevel(logging.INFO)

async def get_players_list():
    return await check_server_players(SERVER_ADDRESS, QUERY_PORT)


async def fast_check(host: str, port: int, timeout: float = 2.0):
    try:
        reader, writer = await asyncio.wait_for(
            asyncio.open_connection(host, port),
            timeout=timeout
        )
        writer.close()
        await writer.wait_closed()
        logger.debug("Watchdog: port fast check ‚Äî port is open.")
        return True
    except (ConnectionRefusedError, asyncio.TimeoutError, OSError):
        logger.debug("Watchdog: port fast check ‚Äî server offline or unreachable.")
        return False
    except Exception as e:
        logger.exception(f"Watchdog: port fast check ‚Äî unknown exception: {e}")
        return None

async def check_server_players(server_address: str, port: int):
    is_open = await fast_check(server_address, port, timeout=2)
    if is_open:
        try:
            logger.debug("Watchdog: mcstatus trying async_lookup...")
            server = await JavaServer.async_lookup(f"{server_address}:{port}", timeout=3)
            logger.debug("Watchdog: mcstatus trying async_status...")
            status = await asyncio.wait_for(server.async_status(), timeout=6)
            players_online = status.players.online
            logger.debug(f"Watchdog: ONLINE {players_online} players online.")
            return players_online

        except Exception as e:
            logger.debug(f"Watchdog: OFFLINE Minecraft server unreachable. {type(e).__name__}: {e}")
            return None
    else:
        return None

@dataclass
class WatchdogState:
    empty_since: Optional[float] = None  # –ö–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º
    notified: bool = False  # –§–ª–∞–≥–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    is_fresh_start: bool = True
    crashed: int = 0  # –°–µ—Ä–≤–µ—Ä —É–ø–∞–ª –∏–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.

    def reset(self):
        for f in fields(self):
            setattr(self, f.name, f.default)

watchdog_state = WatchdogState()


def reset_watchdog_state():
    watchdog_state.reset()


async def watchdog_tick(shutdown_callback, notify_callback=None):
    logger.debug("Watchdog tick.")
    players = await check_server_players(SERVER_ADDRESS, QUERY_PORT)
    now = time.time()

    if players is not None:
        watchdog_state.crashed = 0
        if watchdog_state.is_fresh_start:
            if notify_callback:
                await notify_callback("‚úÖ Minecraft —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
            watchdog_state.is_fresh_start = False

    if players == 0:
        if watchdog_state.empty_since is None:
            watchdog_state.empty_since = now
            logger.info("Watchdog: server is empty, starting shutdown timer")
        elif now - watchdog_state.empty_since >= WD_POWEROFF_COOLDOWN:
            logger.warning("Watchdog: server remained empty, cooldown passed ‚Äî shutting down VPS")
            if notify_callback:
                await notify_callback(f"üî¥ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –±—ã–ª–æ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ {WD_POWEROFF_COOLDOWN // 60} –º–∏–Ω—É—Ç."
                                      f" –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
            await shutdown_callback()
            watchdog_state.empty_since = None  # Reset after shutdown
            watchdog_state.notified = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            watchdog_state.is_fresh_start = True # —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç –Ω–æ–≤—ã–º
        else:
            remaining = int(WD_POWEROFF_COOLDOWN - (now - watchdog_state.empty_since))
            logger.info(f"Watchdog: server still empty, {remaining} seconds left until shutdown")
            if notify_callback and not watchdog_state.notified:
                await notify_callback(f"‚ÑπÔ∏è –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤. "
                                      f"–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ {WD_POWEROFF_COOLDOWN // 60} –º–∏–Ω—É—Ç.")
                watchdog_state.notified = True  # –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

    elif players is not None:
        if watchdog_state.empty_since is not None:
            logger.info("Watchdog: players joined ‚Äî resetting shutdown timer")
            watchdog_state.empty_since = None  # Reset timer because players are online
            watchdog_state.notified = False
    else: # —Å–ª—É—á–∞–π —Å –ø–∞–¥–µ–Ω–∏–µ–º minecraft –∏–ª–∏ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º.
        if not watchdog_state.is_fresh_start:
            logger.warning("Watchdog: looks like minecraft server is crashed or unreachable.")
        else:
            logger.info("Watchdog: Minecraft server is offline and probably starting.")
        if notify_callback and watchdog_state.crashed > 1 and not watchdog_state.is_fresh_start:
            await notify_callback("‚ö†Ô∏è Minecraft —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
            watchdog_state.notified = False
            watchdog_state.is_fresh_start = True # –¥–ª—è –≤—ã–≤–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        elif notify_callback and watchdog_state.crashed == 0 and watchdog_state.is_fresh_start:
            await notify_callback("‚è≥ Minecraft —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        watchdog_state.crashed += 1
        watchdog_state.empty_since = None #  —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –¥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
